import { Process, Processor } from '@nestjs/bull';
import { Job } from 'bull';
import { EmailNotificationService } from '../../email-notification/email-notification.service';
import { ContractService } from '../../contract/contract.service';
import { SubscribeService } from '../../subscribe/subscribe.service';
import { ExploitNotifyJobDto } from '../dto';
import { ExploitService } from '../exploit.service';

@Processor('exploitNotify')
export class ExploitNotifyProcessor {
  constructor(
    private readonly exploitService: ExploitService,
    private readonly contractService: ContractService,
    private readonly subscribeService: SubscribeService,
    private readonly emailNotificationService: EmailNotificationService
  ) {}

  @Process()
  public async notify(job: Job<ExploitNotifyJobDto>) {
    // get exploit information
    const exploit = await this.exploitService.getExploit(job.data.exploitId);

    // get affected contract addresses
    const contractAddrs = await this.contractService.getAllContractAddrs();
    const affectedContractAddrs =
      await this.contractService.hasGithubContractFromAddrs(
        {
          author: exploit.targetAuthor,
          repo: exploit.targetRepo,
          path: exploit.targetPath,
          ref: exploit.targetRef,
        },
        contractAddrs
      );

    // pause smart contracts if applicable
    await this.contractService.pauseContracts(affectedContractAddrs);

    // notify users
    const emailsToNotify = await this.getEmailsFromContractAddrs(
      affectedContractAddrs
    );
    await this.emailNotificationService.sendEmail(emailsToNotify, exploit);
  }

  private async getEmailsFromContractAddrs(
    contractAddrs: string[]
  ): Promise<string[]> {
    let emailsToNotify: string[] = [];
    for (const contractAddr of contractAddrs) {
      const emailAddrs = await this.subscribeService.getEmailsByContract(
        contractAddr
      );
      emailsToNotify = emailsToNotify.concat(emailAddrs);
    }
    return emailsToNotify;
  }
}
